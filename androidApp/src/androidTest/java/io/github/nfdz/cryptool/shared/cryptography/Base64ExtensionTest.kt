package io.github.nfdz.cryptool.shared.cryptography

import io.github.nfdz.cryptool.shared.platform.cryptography.decodeBase64
import io.github.nfdz.cryptool.shared.platform.cryptography.encodeBase64
import junit.framework.TestCase.assertEquals
import org.junit.Test

class Base64ExtensionTest {

    companion object {
        private const val shortDecoded = "INPUT"
        private const val shortEncoded = "SU5QVVQ"
        private const val longDecoded =
            "-11501573682039918785-1478791001436075971-1759054080-4274182361190671263-1039020112198551351880566259-487771322-13988813761578007997-1321864046-19964936811095827528-1249432618-317230211-4910583151928842321-1251777312207940085-625734609-136204919-1666139874476754458-982697054-21071911-679663306-406626566-16024906522887857310407943691342470858-2138510546-12944112391614722978-14007404945817062571264036986-15821867911603606350570708203-987573412-1207641191-635450318-8389845491343594715-142738487318912283351590013348-30947922018038122601190607764-129859701617441622691971653501-2144107081-209563889021032174021093612002841638388336930527-1509664014-32492508-5229292905510963031870579802-1778215293-1263390667639955355-1599021135577190775152733119-96482321016323506607515019021202398778130522596184035285121002472861956702632-15922466861226852085608502556103722860-1173913267-14805109202086199413317033486721777953782349580967650394155946810-1005734659-5402408001473717402-1190500850-268426093514220301-694438517-1125163627-1567319452-3434311819902697941351256461-22906579319258721-143829177214231192161053027489-235529030142432412152237490-693912233-1931656876-1216618194-17324668741690300421920044963-1656522132-1477346458-2107989010770147222-77128664839686798748587688915612869761571044298734769627290349763-127263520521340023391906790746-12317960758996624095890163211603271426-6563683591490797755245766628-795694946-287773974-13674086191477771312-1546479597-1218830805-1164814734-1981147195-674297623-1407267399-1090283739729116620705220105350512036666890273-9033773251271445448-153757478-21185449981261270300424942115-20597984911446078443-1660444750191135418890271650396997306-2109059396-1731234203-113930297413657314171657189525-1305018742914514669-1001887633-331229413-2020561387-38254459-1334896425-1201124421403141660893834386271636935745712380-10936805781407576298-2354487803637052521158898847-32621135112365848211041407993384196144-17547247678664174461938821792-997544141-1381471793406623567-33191173202988542-857658928147460730012332840311588670974-14655636931884746702-2057939261-8662320661800411150331808522-1700072933823342249-733285707-1253710703-934516123-1416668595-5052916711284928856-708360606-18522032951514348526-670486310-12861194802008973641431727393-15563154053951220051041528023116209960-267879409743115303-342110187-1076141077162228099605029962-18324543-85051501807672378-207237998-1994457576-632136594-992779372-729351765942759511-329758131-157639000615914271822061982846-1956357431127326235712086536851022118230-65822795110569389601239231473-1224488267-329918453199134171-162482234214759833601148634761-10501445091801242791-2112570638-172891271088411599918011830071728821403118355273845956441820219888-1644542294-60235128315344284121155604831-18150397627528902412047304378-1040641153-4781293831825371314-345452302709921734804080327-1241992326212015041239240668-102794707413868489693665117181728574902-124293001-556252647891995442511383267704891101-676548378789748256-11008806032498460991098344285369504348-467471293-16138813481689273939754484683-2095231715-1038375371734147192-261408725347807233-272790426-9882381321240301688328113212-509506054-364369328-8720874071902308082-1481162325-1786710783-1524414693-327935182-14044298221023938561-2062209627-811689660-975410658-1871688425394753293629644101-1691913549-1878953639-1173470175-3226078831688255317567744391523805320-12724826099084098461551240027-1058432541-810815910-428926291-1732767382433226701102108095-654114376184876221-367339924-20506909185126435241913107548480544387-1134206956-813714325-9053285351900217188-1238218703959959805-22114049121298125901839002622009609602250161152-1643827948-1702868626-132418406567525515517854063961947051101712700920-466244014-104657231017787389331954796598790420017198753910115510961192144508106-1177142809-2660495437067505252038975825-7074133751785782565-140207546701088632664287097-19036151145838889141661402050-1126486488-86247988174404593655170696-170412936281764156-330231020-2033168063-156653859-439059985-1801847890615961603-88"
        private const val longEncoded =
            "LTExNTAxNTczNjgyMDM5OTE4Nzg1LTE0Nzg3OTEwMDE0MzYwNzU5NzEtMTc1OTA1NDA4MC00Mjc0MTgyMzYxMTkwNjcxMjYzLTEwMzkwMjAxMTIxOTg1NTEzNTE4ODA1NjYyNTktNDg3NzcxMzIyLTEzOTg4ODEzNzYxNTc4MDA3OTk3LTEzMjE4NjQwNDYtMTk5NjQ5MzY4MTEwOTU4Mjc1MjgtMTI0OTQzMjYxOC0zMTcyMzAyMTEtNDkxMDU4MzE1MTkyODg0MjMyMS0xMjUxNzc3MzEyMjA3OTQwMDg1LTYyNTczNDYwOS0xMzYyMDQ5MTktMTY2NjEzOTg3NDQ3Njc1NDQ1OC05ODI2OTcwNTQtMjEwNzE5MTEtNjc5NjYzMzA2LTQwNjYyNjU2Ni0xNjAyNDkwNjUyMjg4Nzg1NzMxMDQwNzk0MzY5MTM0MjQ3MDg1OC0yMTM4NTEwNTQ2LTEyOTQ0MTEyMzkxNjE0NzIyOTc4LTE0MDA3NDA0OTQ1ODE3MDYyNTcxMjY0MDM2OTg2LTE1ODIxODY3OTExNjAzNjA2MzUwNTcwNzA4MjAzLTk4NzU3MzQxMi0xMjA3NjQxMTkxLTYzNTQ1MDMxOC04Mzg5ODQ1NDkxMzQzNTk0NzE1LTE0MjczODQ4NzMxODkxMjI4MzM1MTU5MDAxMzM0OC0zMDk0NzkyMjAxODAzODEyMjYwMTE5MDYwNzc2NC0xMjk4NTk3MDE2MTc0NDE2MjI2OTE5NzE2NTM1MDEtMjE0NDEwNzA4MS0yMDk1NjM4ODkwMjEwMzIxNzQwMjEwOTM2MTIwMDI4NDE2MzgzODgzMzY5MzA1MjctMTUwOTY2NDAxNC0zMjQ5MjUwOC01MjI5MjkyOTA1NTEwOTYzMDMxODcwNTc5ODAyLTE3NzgyMTUyOTMtMTI2MzM5MDY2NzYzOTk1NTM1NS0xNTk5MDIxMTM1NTc3MTkwNzc1MTUyNzMzMTE5LTk2NDgyMzIxMDE2MzIzNTA2NjA3NTE1MDE5MDIxMjAyMzk4Nzc4MTMwNTIyNTk2MTg0MDM1Mjg1MTIxMDAyNDcyODYxOTU2NzAyNjMyLTE1OTIyNDY2ODYxMjI2ODUyMDg1NjA4NTAyNTU2MTAzNzIyODYwLTExNzM5MTMyNjctMTQ4MDUxMDkyMDIwODYxOTk0MTMzMTcwMzM0ODY3MjE3Nzc5NTM3ODIzNDk1ODA5Njc2NTAzOTQxNTU5NDY4MTAtMTAwNTczNDY1OS01NDAyNDA4MDAxNDczNzE3NDAyLTExOTA1MDA4NTAtMjY4NDI2MDkzNTE0MjIwMzAxLTY5NDQzODUxNy0xMTI1MTYzNjI3LTE1NjczMTk0NTItMzQzNDMxMTgxOTkwMjY5Nzk0MTM1MTI1NjQ2MS0yMjkwNjU3OTMxOTI1ODcyMS0xNDM4MjkxNzcyMTQyMzExOTIxNjEwNTMwMjc0ODktMjM1NTI5MDMwMTQyNDMyNDEyMTUyMjM3NDkwLTY5MzkxMjIzMy0xOTMxNjU2ODc2LTEyMTY2MTgxOTQtMTczMjQ2Njg3NDE2OTAzMDA0MjE5MjAwNDQ5NjMtMTY1NjUyMjEzMi0xNDc3MzQ2NDU4LTIxMDc5ODkwMTA3NzAxNDcyMjItNzcxMjg2NjQ4Mzk2ODY3OTg3NDg1ODc2ODg5MTU2MTI4Njk3NjE1NzEwNDQyOTg3MzQ3Njk2MjcyOTAzNDk3NjMtMTI3MjYzNTIwNTIxMzQwMDIzMzkxOTA2NzkwNzQ2LTEyMzE3OTYwNzU4OTk2NjI0MDk1ODkwMTYzMjExNjAzMjcxNDI2LTY1NjM2ODM1OTE0OTA3OTc3NTUyNDU3NjY2MjgtNzk1Njk0OTQ2LTI4Nzc3Mzk3NC0xMzY3NDA4NjE5MTQ3Nzc3MTMxMi0xNTQ2NDc5NTk3LTEyMTg4MzA4MDUtMTE2NDgxNDczNC0xOTgxMTQ3MTk1LTY3NDI5NzYyMy0xNDA3MjY3Mzk5LTEwOTAyODM3Mzk3MjkxMTY2MjA3MDUyMjAxMDUzNTA1MTIwMzY2NjY4OTAyNzMtOTAzMzc3MzI1MTI3MTQ0NTQ0OC0xNTM3NTc0NzgtMjExODU0NDk5ODEyNjEyNzAzMDA0MjQ5NDIxMTUtMjA1OTc5ODQ5MTE0NDYwNzg0NDMtMTY2MDQ0NDc1MDE5MTEzNTQxODg5MDI3MTY1MDM5Njk5NzMwNi0yMTA5MDU5Mzk2LTE3MzEyMzQyMDMtMTEzOTMwMjk3NDEzNjU3MzE0MTcxNjU3MTg5NTI1LTEzMDUwMTg3NDI5MTQ1MTQ2NjktMTAwMTg4NzYzMy0zMzEyMjk0MTMtMjAyMDU2MTM4Ny0zODI1NDQ1OS0xMzM0ODk2NDI1LTEyMDExMjQ0MjE0MDMxNDE2NjA4OTM4MzQzODYyNzE2MzY5MzU3NDU3MTIzODAtMTA5MzY4MDU3ODE0MDc1NzYyOTgtMjM1NDQ4NzgwMzYzNzA1MjUyMTE1ODg5ODg0Ny0zMjYyMTEzNTExMjM2NTg0ODIxMTA0MTQwNzk5MzM4NDE5NjE0NC0xNzU0NzI0NzY3ODY2NDE3NDQ2MTkzODgyMTc5Mi05OTc1NDQxNDEtMTM4MTQ3MTc5MzQwNjYyMzU2Ny0zMzE5MTE3MzIwMjk4ODU0Mi04NTc2NTg5MjgxNDc0NjA3MzAwMTIzMzI4NDAzMTE1ODg2NzA5NzQtMTQ2NTU2MzY5MzE4ODQ3NDY3MDItMjA1NzkzOTI2MS04NjYyMzIwNjYxODAwNDExMTUwMzMxODA4NTIyLTE3MDAwNzI5MzM4MjMzNDIyNDktNzMzMjg1NzA3LTEyNTM3MTA3MDMtOTM0NTE2MTIzLTE0MTY2Njg1OTUtNTA1MjkxNjcxMTI4NDkyODg1Ni03MDgzNjA2MDYtMTg1MjIwMzI5NTE1MTQzNDg1MjYtNjcwNDg2MzEwLTEyODYxMTk0ODAyMDA4OTczNjQxNDMxNzI3MzkzLTE1NTYzMTU0MDUzOTUxMjIwMDUxMDQxNTI4MDIzMTE2MjA5OTYwLTI2Nzg3OTQwOTc0MzExNTMwMy0zNDIxMTAxODctMTA3NjE0MTA3NzE2MjIyODA5OTYwNTAyOTk2Mi0xODMyNDU0My04NTA1MTUwMTgwNzY3MjM3OC0yMDcyMzc5OTgtMTk5NDQ1NzU3Ni02MzIxMzY1OTQtOTkyNzc5MzcyLTcyOTM1MTc2NTk0Mjc1OTUxMS0zMjk3NTgxMzEtMTU3NjM5MDAwNjE1OTE0MjcxODIyMDYxOTgyODQ2LTE5NTYzNTc0MzExMjczMjYyMzU3MTIwODY1MzY4NTEwMjIxMTgyMzAtNjU4MjI3OTUxMTA1NjkzODk2MDEyMzkyMzE0NzMtMTIyNDQ4ODI2Ny0zMjk5MTg0NTMxOTkxMzQxNzEtMTYyNDgyMjM0MjE0NzU5ODMzNjAxMTQ4NjM0NzYxLTEwNTAxNDQ1MDkxODAxMjQyNzkxLTIxMTI1NzA2MzgtMTcyODkxMjcxMDg4NDExNTk5OTE4MDExODMwMDcxNzI4ODIxNDAzMTE4MzU1MjczODQ1OTU2NDQxODIwMjE5ODg4LTE2NDQ1NDIyOTQtNjAyMzUxMjgzMTUzNDQyODQxMjExNTU2MDQ4MzEtMTgxNTAzOTc2Mjc1Mjg5MDI0MTIwNDczMDQzNzgtMTA0MDY0MTE1My00NzgxMjkzODMxODI1MzcxMzE0LTM0NTQ1MjMwMjcwOTkyMTczNDgwNDA4MDMyNy0xMjQxOTkyMzI2MjEyMDE1MDQxMjM5MjQwNjY4LTEwMjc5NDcwNzQxMzg2ODQ4OTY5MzY2NTExNzE4MTcyODU3NDkwMi0xMjQyOTMwMDEtNTU2MjUyNjQ3ODkxOTk1NDQyNTExMzgzMjY3NzA0ODkxMTAxLTY3NjU0ODM3ODc4OTc0ODI1Ni0xMTAwODgwNjAzMjQ5ODQ2MDk5MTA5ODM0NDI4NTM2OTUwNDM0OC00Njc0NzEyOTMtMTYxMzg4MTM0ODE2ODkyNzM5Mzk3NTQ0ODQ2ODMtMjA5NTIzMTcxNS0xMDM4Mzc1MzcxNzM0MTQ3MTkyLTI2MTQwODcyNTM0NzgwNzIzMy0yNzI3OTA0MjYtOTg4MjM4MTMyMTI0MDMwMTY4ODMyODExMzIxMi01MDk1MDYwNTQtMzY0MzY5MzI4LTg3MjA4NzQwNzE5MDIzMDgwODItMTQ4MTE2MjMyNS0xNzg2NzEwNzgzLTE1MjQ0MTQ2OTMtMzI3OTM1MTgyLTE0MDQ0Mjk4MjIxMDIzOTM4NTYxLTIwNjIyMDk2MjctODExNjg5NjYwLTk3NTQxMDY1OC0xODcxNjg4NDI1Mzk0NzUzMjkzNjI5NjQ0MTAxLTE2OTE5MTM1NDktMTg3ODk1MzYzOS0xMTczNDcwMTc1LTMyMjYwNzg4MzE2ODgyNTUzMTc1Njc3NDQzOTE1MjM4MDUzMjAtMTI3MjQ4MjYwOTkwODQwOTg0NjE1NTEyNDAwMjctMTA1ODQzMjU0MS04MTA4MTU5MTAtNDI4OTI2MjkxLTE3MzI3NjczODI0MzMyMjY3MDExMDIxMDgwOTUtNjU0MTE0Mzc2MTg0ODc2MjIxLTM2NzMzOTkyNC0yMDUwNjkwOTE4NTEyNjQzNTI0MTkxMzEwNzU0ODQ4MDU0NDM4Ny0xMTM0MjA2OTU2LTgxMzcxNDMyNS05MDUzMjg1MzUxOTAwMjE3MTg4LTEyMzgyMTg3MDM5NTk5NTk4MDUtMjIxMTQwNDkxMjEyOTgxMjU5MDE4MzkwMDI2MjIwMDk2MDk2MDIyNTAxNjExNTItMTY0MzgyNzk0OC0xNzAyODY4NjI2LTEzMjQxODQwNjU2NzUyNTUxNTUxNzg1NDA2Mzk2MTk0NzA1MTEwMTcxMjcwMDkyMC00NjYyNDQwMTQtMTA0NjU3MjMxMDE3Nzg3Mzg5MzMxOTU0Nzk2NTk4NzkwNDIwMDE3MTk4NzUzOTEwMTE1NTEwOTYxMTkyMTQ0NTA4MTA2LTExNzcxNDI4MDktMjY2MDQ5NTQzNzA2NzUwNTI1MjAzODk3NTgyNS03MDc0MTMzNzUxNzg1NzgyNTY1LTE0MDIwNzU0NjcwMTA4ODYzMjY2NDI4NzA5Ny0xOTAzNjE1MTE0NTgzODg4OTE0MTY2MTQwMjA1MC0xMTI2NDg2NDg4LTg2MjQ3OTg4MTc0NDA0NTkzNjU1MTcwNjk2LTE3MDQxMjkzNjI4MTc2NDE1Ni0zMzAyMzEwMjAtMjAzMzE2ODA2My0xNTY2NTM4NTktNDM5MDU5OTg1LTE4MDE4NDc4OTA2MTU5NjE2MDMtODg"
    }

    @Test
    fun testEncodeEmpty() {
        val result = "".toByteArray().encodeBase64()
        assertEquals("", result)
    }

    @Test
    fun testEncode() {
        val result = shortDecoded.toByteArray().encodeBase64()
        assertEquals(shortEncoded, result)
    }

    @Test
    fun testEncodeLong() {
        val result = longDecoded.toByteArray().encodeBase64()
        assertEquals(longEncoded, result)
    }

    @Test
    fun testDecodeEmpty() {
        val result = String("".decodeBase64())
        assertEquals("", result)
    }

    @Test
    fun testDecode() {
        val result = String(shortEncoded.decodeBase64())
        assertEquals(shortDecoded, result)
    }

    @Test
    fun testDecodeLong() {
        val result = String(longEncoded.decodeBase64())
        assertEquals(longDecoded, result)
    }

    @Test(expected = java.lang.IllegalArgumentException::class)
    fun testDecodeError() {
        "-".decodeBase64()
    }

}